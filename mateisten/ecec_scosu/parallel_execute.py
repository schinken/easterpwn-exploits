#!/usr/bin/python3

import argparse
import threading
import subprocess
import time

parser = argparse.ArgumentParser(description="Execute python code file in parallel for all hosts. The called python code has a global variable 'host' that contains the target host identifier. 'port' contains a port number")

parser.add_argument('-f', '--file', required=True, help="Attack host file", default="/opt/ctf/tgt_hosts")
parser.add_argument('-e', '--exec-py', help="Execute python file")
parser.add_argument('-s', '--exec-sh', help="Execute command on a shell. \$TGTHOST and \$TGTPORT contain the host information")
parser.add_argument('-l', '--loops', default=1, type=int)
parser.add_argument('-p', '--port', default=80, type=int, help="Directly passed as global variable 'port' to the executed code file")

parsed = parser.parse_args()

hostf = open(parsed.file, 'r')
hosts = []
hostdata = hostf.read()
hostf.close()

for i in hostdata.splitlines():
	h = i.strip()
	if h == '':
		continue
	hosts.append(h)


class PyExec(threading.Thread):
	def __init__(self, execf, host, port):
		super(PyExec, self).__init__()
		self.f = execf
		self.port = port
		self.host = host
		self.globs = {'host': host, 'port': port}
		self.locs = None
	def run(self):
		f = open(self.f, 'r')
		code = f.read()
		f.close()
		cmpl = compile(code, self.f, 'exec')
		for i in range(parsed.loops):
			print("Iteration " + str(i) + " host " + self.host + " port " + str(self.port))
			try:
				exec(cmpl, self.globs, self.locs)
			except:
				pass
			time.sleep(2)

class ShExec(threading.Thread):
	def __init__(self, cmd, host, port):
		super(ShExec, self).__init__()
		self.cmd = cmd
		self.host = host
		self.port = str(port)
		self.env = {"TGTHOST": host, "TGTPORT": str(port)}
	def run(self):
		cmd = self.cmd
		env = self.env
		for i in range(parsed.loops):
			p = subprocess.Popen(['/bin/sh', '-c', cmd], env=env, stdout=subprocess.PIPE)
			sout,_ = p.communicate()
			output = "\nIteration " + str(i) + " host " + self.host + " port " + str(self.port) + "\n" + sout.decode()
			print(output)
execs = []

for host in hosts:
	if parsed.exec_py:
		e = PyExec(parsed.exec_py, host, parsed.port)
	elif parsed.exec_sh:
		e = ShExec(parsed.exec_sh, host, parsed.port)
	e.start()
	execs.append(e)

for e in execs:
	e.join()

